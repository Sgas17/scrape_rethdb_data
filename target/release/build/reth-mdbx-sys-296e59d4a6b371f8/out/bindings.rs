/* automatically generated by rust-bindgen 0.71.1 */

pub const MDBX_VERSION_MAJOR: ::std::os::raw::c_uint = 0;
pub const MDBX_VERSION_MINOR: ::std::os::raw::c_uint = 13;
pub const MDBX_LOCKNAME: &[u8; 10] = b"/mdbx.lck\0";
pub const MDBX_DATANAME: &[u8; 10] = b"/mdbx.dat\0";
pub const MDBX_LOCK_SUFFIX: &[u8; 5] = b"-lck\0";
pub type va_list = __builtin_va_list;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __pid_t = ::std::os::raw::c_int;
pub type pid_t = __pid_t;
pub type pthread_t = ::std::os::raw::c_ulong;
pub type mode_t = __mode_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
pub type mdbx_filehandle_t = ::std::os::raw::c_int;
pub type mdbx_pid_t = pid_t;
pub type mdbx_tid_t = pthread_t;
pub type mdbx_mode_t = mode_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_version_info {
    pub major: u16,
    pub minor: u16,
    pub patch: u16,
    pub tweak: u16,
    pub semver_prerelease: *const ::std::os::raw::c_char,
    pub git: MDBX_version_info__bindgen_ty_1,
    pub sourcery: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_version_info__bindgen_ty_1 {
    pub datetime: *const ::std::os::raw::c_char,
    pub tree: *const ::std::os::raw::c_char,
    pub commit: *const ::std::os::raw::c_char,
    pub describe: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_build_info {
    pub datetime: *const ::std::os::raw::c_char,
    pub target: *const ::std::os::raw::c_char,
    pub options: *const ::std::os::raw::c_char,
    pub compiler: *const ::std::os::raw::c_char,
    pub flags: *const ::std::os::raw::c_char,
    pub metadata: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_env {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_txn {
    _unused: [u8; 0],
}
pub type MDBX_dbi = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_cursor {
    _unused: [u8; 0],
}
pub type MDBX_val = iovec;
pub const MDBX_MAX_DBI: MDBX_constants = 32765;
pub const MDBX_MAXDATASIZE: MDBX_constants = 2147418112;
pub const MDBX_MIN_PAGESIZE: MDBX_constants = 256;
pub const MDBX_MAX_PAGESIZE: MDBX_constants = 65536;
pub type MDBX_constants = ::std::os::raw::c_uint;
pub const MDBX_LOG_FATAL: MDBX_log_level = 0;
pub const MDBX_LOG_ERROR: MDBX_log_level = 1;
pub const MDBX_LOG_WARN: MDBX_log_level = 2;
pub const MDBX_LOG_NOTICE: MDBX_log_level = 3;
pub const MDBX_LOG_VERBOSE: MDBX_log_level = 4;
pub const MDBX_LOG_DEBUG: MDBX_log_level = 5;
pub const MDBX_LOG_TRACE: MDBX_log_level = 6;
pub const MDBX_LOG_EXTRA: MDBX_log_level = 7;
pub const MDBX_LOG_DONTCHANGE: MDBX_log_level = -1;
pub type MDBX_log_level = ::std::os::raw::c_int;
pub use self::MDBX_log_level as MDBX_log_level_t;
pub const MDBX_DBG_NONE: MDBX_debug_flags = 0;
pub const MDBX_DBG_ASSERT: MDBX_debug_flags = 1;
pub const MDBX_DBG_AUDIT: MDBX_debug_flags = 2;
pub const MDBX_DBG_JITTER: MDBX_debug_flags = 4;
pub const MDBX_DBG_DUMP: MDBX_debug_flags = 8;
pub const MDBX_DBG_LEGACY_MULTIOPEN: MDBX_debug_flags = 16;
pub const MDBX_DBG_LEGACY_OVERLAP: MDBX_debug_flags = 32;
pub const MDBX_DBG_DONT_UPGRADE: MDBX_debug_flags = 64;
pub const MDBX_DBG_DONTCHANGE: MDBX_debug_flags = -1;
pub type MDBX_debug_flags = ::std::os::raw::c_int;
pub use self::MDBX_debug_flags as MDBX_debug_flags_t;
pub type MDBX_debug_func = ::std::option::Option<
    unsafe extern "C" fn(
        loglevel: MDBX_log_level_t,
        function: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ),
>;
pub type MDBX_debug_func_nofmt = ::std::option::Option<
    unsafe extern "C" fn(
        loglevel: MDBX_log_level_t,
        function: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        msg: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_uint,
    ),
>;
pub type MDBX_assert_func = ::std::option::Option<
    unsafe extern "C" fn(
        env: *const MDBX_env,
        msg: *const ::std::os::raw::c_char,
        function: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_uint,
    ),
>;
pub const MDBX_ENV_DEFAULTS: MDBX_env_flags = 0;
pub const MDBX_VALIDATION: MDBX_env_flags = 8192;
pub const MDBX_NOSUBDIR: MDBX_env_flags = 16384;
pub const MDBX_RDONLY: MDBX_env_flags = 131072;
pub const MDBX_EXCLUSIVE: MDBX_env_flags = 4194304;
pub const MDBX_ACCEDE: MDBX_env_flags = 1073741824;
pub const MDBX_WRITEMAP: MDBX_env_flags = 524288;
pub const MDBX_NOSTICKYTHREADS: MDBX_env_flags = 2097152;
pub const MDBX_NOTLS: MDBX_env_flags = 2097152;
pub const MDBX_NORDAHEAD: MDBX_env_flags = 8388608;
pub const MDBX_NOMEMINIT: MDBX_env_flags = 16777216;
pub const MDBX_COALESCE: MDBX_env_flags = 33554432;
pub const MDBX_LIFORECLAIM: MDBX_env_flags = 67108864;
pub const MDBX_PAGEPERTURB: MDBX_env_flags = 134217728;
pub const MDBX_SYNC_DURABLE: MDBX_env_flags = 0;
pub const MDBX_NOMETASYNC: MDBX_env_flags = 262144;
pub const MDBX_SAFE_NOSYNC: MDBX_env_flags = 65536;
pub const MDBX_MAPASYNC: MDBX_env_flags = 65536;
pub const MDBX_UTTERLY_NOSYNC: MDBX_env_flags = 1114112;
pub type MDBX_env_flags = ::std::os::raw::c_uint;
pub use self::MDBX_env_flags as MDBX_env_flags_t;
pub const MDBX_TXN_READWRITE: MDBX_txn_flags = 0;
pub const MDBX_TXN_RDONLY: MDBX_txn_flags = 131072;
pub const MDBX_TXN_RDONLY_PREPARE: MDBX_txn_flags = 16908288;
pub const MDBX_TXN_TRY: MDBX_txn_flags = 268435456;
pub const MDBX_TXN_NOMETASYNC: MDBX_txn_flags = 262144;
pub const MDBX_TXN_NOSYNC: MDBX_txn_flags = 65536;
pub const MDBX_TXN_INVALID: MDBX_txn_flags = -2147483648;
pub const MDBX_TXN_FINISHED: MDBX_txn_flags = 1;
pub const MDBX_TXN_ERROR: MDBX_txn_flags = 2;
pub const MDBX_TXN_DIRTY: MDBX_txn_flags = 4;
pub const MDBX_TXN_SPILLS: MDBX_txn_flags = 8;
pub const MDBX_TXN_HAS_CHILD: MDBX_txn_flags = 16;
pub const MDBX_TXN_PARKED: MDBX_txn_flags = 32;
pub const MDBX_TXN_AUTOUNPARK: MDBX_txn_flags = 64;
pub const MDBX_TXN_OUSTED: MDBX_txn_flags = 128;
pub const MDBX_TXN_BLOCKED: MDBX_txn_flags = 51;
pub type MDBX_txn_flags = ::std::os::raw::c_int;
pub use self::MDBX_txn_flags as MDBX_txn_flags_t;
pub const MDBX_DB_DEFAULTS: MDBX_db_flags = 0;
pub const MDBX_REVERSEKEY: MDBX_db_flags = 2;
pub const MDBX_DUPSORT: MDBX_db_flags = 4;
pub const MDBX_INTEGERKEY: MDBX_db_flags = 8;
pub const MDBX_DUPFIXED: MDBX_db_flags = 16;
pub const MDBX_INTEGERDUP: MDBX_db_flags = 32;
pub const MDBX_REVERSEDUP: MDBX_db_flags = 64;
pub const MDBX_CREATE: MDBX_db_flags = 262144;
pub const MDBX_DB_ACCEDE: MDBX_db_flags = 1073741824;
pub type MDBX_db_flags = ::std::os::raw::c_uint;
pub use self::MDBX_db_flags as MDBX_db_flags_t;
pub const MDBX_UPSERT: MDBX_put_flags = 0;
pub const MDBX_NOOVERWRITE: MDBX_put_flags = 16;
pub const MDBX_NODUPDATA: MDBX_put_flags = 32;
pub const MDBX_CURRENT: MDBX_put_flags = 64;
pub const MDBX_ALLDUPS: MDBX_put_flags = 128;
pub const MDBX_RESERVE: MDBX_put_flags = 65536;
pub const MDBX_APPEND: MDBX_put_flags = 131072;
pub const MDBX_APPENDDUP: MDBX_put_flags = 262144;
pub const MDBX_MULTIPLE: MDBX_put_flags = 524288;
pub type MDBX_put_flags = ::std::os::raw::c_uint;
pub use self::MDBX_put_flags as MDBX_put_flags_t;
pub const MDBX_CP_DEFAULTS: MDBX_copy_flags = 0;
pub const MDBX_CP_COMPACT: MDBX_copy_flags = 1;
pub const MDBX_CP_FORCE_DYNAMIC_SIZE: MDBX_copy_flags = 2;
pub const MDBX_CP_DONT_FLUSH: MDBX_copy_flags = 4;
pub const MDBX_CP_THROTTLE_MVCC: MDBX_copy_flags = 8;
pub const MDBX_CP_DISPOSE_TXN: MDBX_copy_flags = 16;
pub const MDBX_CP_RENEW_TXN: MDBX_copy_flags = 32;
pub type MDBX_copy_flags = ::std::os::raw::c_uint;
pub use self::MDBX_copy_flags as MDBX_copy_flags_t;
pub const MDBX_FIRST: MDBX_cursor_op = 0;
pub const MDBX_FIRST_DUP: MDBX_cursor_op = 1;
pub const MDBX_GET_BOTH: MDBX_cursor_op = 2;
pub const MDBX_GET_BOTH_RANGE: MDBX_cursor_op = 3;
pub const MDBX_GET_CURRENT: MDBX_cursor_op = 4;
pub const MDBX_GET_MULTIPLE: MDBX_cursor_op = 5;
pub const MDBX_LAST: MDBX_cursor_op = 6;
pub const MDBX_LAST_DUP: MDBX_cursor_op = 7;
pub const MDBX_NEXT: MDBX_cursor_op = 8;
pub const MDBX_NEXT_DUP: MDBX_cursor_op = 9;
pub const MDBX_NEXT_MULTIPLE: MDBX_cursor_op = 10;
pub const MDBX_NEXT_NODUP: MDBX_cursor_op = 11;
pub const MDBX_PREV: MDBX_cursor_op = 12;
pub const MDBX_PREV_DUP: MDBX_cursor_op = 13;
pub const MDBX_PREV_NODUP: MDBX_cursor_op = 14;
pub const MDBX_SET: MDBX_cursor_op = 15;
pub const MDBX_SET_KEY: MDBX_cursor_op = 16;
pub const MDBX_SET_RANGE: MDBX_cursor_op = 17;
pub const MDBX_PREV_MULTIPLE: MDBX_cursor_op = 18;
pub const MDBX_SET_LOWERBOUND: MDBX_cursor_op = 19;
pub const MDBX_SET_UPPERBOUND: MDBX_cursor_op = 20;
pub const MDBX_TO_KEY_LESSER_THAN: MDBX_cursor_op = 21;
pub const MDBX_TO_KEY_LESSER_OR_EQUAL: MDBX_cursor_op = 22;
pub const MDBX_TO_KEY_EQUAL: MDBX_cursor_op = 23;
pub const MDBX_TO_KEY_GREATER_OR_EQUAL: MDBX_cursor_op = 24;
pub const MDBX_TO_KEY_GREATER_THAN: MDBX_cursor_op = 25;
pub const MDBX_TO_EXACT_KEY_VALUE_LESSER_THAN: MDBX_cursor_op = 26;
pub const MDBX_TO_EXACT_KEY_VALUE_LESSER_OR_EQUAL: MDBX_cursor_op = 27;
pub const MDBX_TO_EXACT_KEY_VALUE_EQUAL: MDBX_cursor_op = 28;
pub const MDBX_TO_EXACT_KEY_VALUE_GREATER_OR_EQUAL: MDBX_cursor_op = 29;
pub const MDBX_TO_EXACT_KEY_VALUE_GREATER_THAN: MDBX_cursor_op = 30;
pub const MDBX_TO_PAIR_LESSER_THAN: MDBX_cursor_op = 31;
pub const MDBX_TO_PAIR_LESSER_OR_EQUAL: MDBX_cursor_op = 32;
pub const MDBX_TO_PAIR_EQUAL: MDBX_cursor_op = 33;
pub const MDBX_TO_PAIR_GREATER_OR_EQUAL: MDBX_cursor_op = 34;
pub const MDBX_TO_PAIR_GREATER_THAN: MDBX_cursor_op = 35;
pub const MDBX_SEEK_AND_GET_MULTIPLE: MDBX_cursor_op = 36;
pub type MDBX_cursor_op = ::std::os::raw::c_uint;
pub const MDBX_SUCCESS: MDBX_error = 0;
pub const MDBX_RESULT_FALSE: MDBX_error = 0;
pub const MDBX_RESULT_TRUE: MDBX_error = -1;
pub const MDBX_KEYEXIST: MDBX_error = -30799;
pub const MDBX_FIRST_LMDB_ERRCODE: MDBX_error = -30799;
pub const MDBX_NOTFOUND: MDBX_error = -30798;
pub const MDBX_PAGE_NOTFOUND: MDBX_error = -30797;
pub const MDBX_CORRUPTED: MDBX_error = -30796;
pub const MDBX_PANIC: MDBX_error = -30795;
pub const MDBX_VERSION_MISMATCH: MDBX_error = -30794;
pub const MDBX_INVALID: MDBX_error = -30793;
pub const MDBX_MAP_FULL: MDBX_error = -30792;
pub const MDBX_DBS_FULL: MDBX_error = -30791;
pub const MDBX_READERS_FULL: MDBX_error = -30790;
pub const MDBX_TXN_FULL: MDBX_error = -30788;
pub const MDBX_CURSOR_FULL: MDBX_error = -30787;
pub const MDBX_PAGE_FULL: MDBX_error = -30786;
pub const MDBX_UNABLE_EXTEND_MAPSIZE: MDBX_error = -30785;
pub const MDBX_INCOMPATIBLE: MDBX_error = -30784;
pub const MDBX_BAD_RSLOT: MDBX_error = -30783;
pub const MDBX_BAD_TXN: MDBX_error = -30782;
pub const MDBX_BAD_VALSIZE: MDBX_error = -30781;
pub const MDBX_BAD_DBI: MDBX_error = -30780;
pub const MDBX_PROBLEM: MDBX_error = -30779;
pub const MDBX_LAST_LMDB_ERRCODE: MDBX_error = -30779;
pub const MDBX_BUSY: MDBX_error = -30778;
pub const MDBX_FIRST_ADDED_ERRCODE: MDBX_error = -30778;
pub const MDBX_EMULTIVAL: MDBX_error = -30421;
pub const MDBX_EBADSIGN: MDBX_error = -30420;
pub const MDBX_WANNA_RECOVERY: MDBX_error = -30419;
pub const MDBX_EKEYMISMATCH: MDBX_error = -30418;
pub const MDBX_TOO_LARGE: MDBX_error = -30417;
pub const MDBX_THREAD_MISMATCH: MDBX_error = -30416;
pub const MDBX_TXN_OVERLAPPING: MDBX_error = -30415;
pub const MDBX_BACKLOG_DEPLETED: MDBX_error = -30414;
pub const MDBX_DUPLICATED_CLK: MDBX_error = -30413;
pub const MDBX_DANGLING_DBI: MDBX_error = -30412;
pub const MDBX_OUSTED: MDBX_error = -30411;
pub const MDBX_MVCC_RETARDED: MDBX_error = -30410;
pub const MDBX_LAST_ADDED_ERRCODE: MDBX_error = -30410;
pub const MDBX_ENODATA: MDBX_error = 61;
pub const MDBX_EINVAL: MDBX_error = 22;
pub const MDBX_EACCESS: MDBX_error = 13;
pub const MDBX_ENOMEM: MDBX_error = 12;
pub const MDBX_EROFS: MDBX_error = 30;
pub const MDBX_ENOSYS: MDBX_error = 38;
pub const MDBX_EIO: MDBX_error = 5;
pub const MDBX_EPERM: MDBX_error = 1;
pub const MDBX_EINTR: MDBX_error = 4;
pub const MDBX_ENOFILE: MDBX_error = 2;
pub const MDBX_EREMOTE: MDBX_error = 121;
pub const MDBX_EDEADLK: MDBX_error = 35;
pub type MDBX_error = ::std::os::raw::c_int;
pub use self::MDBX_error as MDBX_error_t;
pub const MDBX_opt_max_db: MDBX_option = 0;
pub const MDBX_opt_max_readers: MDBX_option = 1;
pub const MDBX_opt_sync_bytes: MDBX_option = 2;
pub const MDBX_opt_sync_period: MDBX_option = 3;
pub const MDBX_opt_rp_augment_limit: MDBX_option = 4;
pub const MDBX_opt_loose_limit: MDBX_option = 5;
pub const MDBX_opt_dp_reserve_limit: MDBX_option = 6;
pub const MDBX_opt_txn_dp_limit: MDBX_option = 7;
pub const MDBX_opt_txn_dp_initial: MDBX_option = 8;
pub const MDBX_opt_spill_max_denominator: MDBX_option = 9;
pub const MDBX_opt_spill_min_denominator: MDBX_option = 10;
pub const MDBX_opt_spill_parent4child_denominator: MDBX_option = 11;
pub const MDBX_opt_merge_threshold_16dot16_percent: MDBX_option = 12;
pub const MDBX_opt_writethrough_threshold: MDBX_option = 13;
pub const MDBX_opt_prefault_write_enable: MDBX_option = 14;
pub const MDBX_opt_gc_time_limit: MDBX_option = 15;
pub const MDBX_opt_prefer_waf_insteadof_balance: MDBX_option = 16;
pub const MDBX_opt_subpage_limit: MDBX_option = 17;
pub const MDBX_opt_subpage_room_threshold: MDBX_option = 18;
pub const MDBX_opt_subpage_reserve_prereq: MDBX_option = 19;
pub const MDBX_opt_subpage_reserve_limit: MDBX_option = 20;
pub type MDBX_option = ::std::os::raw::c_uint;
pub use self::MDBX_option as MDBX_option_t;
pub const MDBX_ENV_JUST_DELETE: MDBX_env_delete_mode = 0;
pub const MDBX_ENV_ENSURE_UNUSED: MDBX_env_delete_mode = 1;
pub const MDBX_ENV_WAIT_FOR_UNUSED: MDBX_env_delete_mode = 2;
pub type MDBX_env_delete_mode = ::std::os::raw::c_uint;
pub use self::MDBX_env_delete_mode as MDBX_env_delete_mode_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_stat {
    pub ms_psize: u32,
    pub ms_depth: u32,
    pub ms_branch_pages: u64,
    pub ms_leaf_pages: u64,
    pub ms_overflow_pages: u64,
    pub ms_entries: u64,
    pub ms_mod_txnid: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_envinfo {
    pub mi_geo: MDBX_envinfo__bindgen_ty_1,
    pub mi_mapsize: u64,
    pub mi_last_pgno: u64,
    pub mi_recent_txnid: u64,
    pub mi_latter_reader_txnid: u64,
    pub mi_self_latter_reader_txnid: u64,
    pub mi_meta_txnid: [u64; 3usize],
    pub mi_meta_sign: [u64; 3usize],
    pub mi_maxreaders: u32,
    pub mi_numreaders: u32,
    pub mi_dxb_pagesize: u32,
    pub mi_sys_pagesize: u32,
    pub mi_bootid: MDBX_envinfo__bindgen_ty_2,
    pub mi_unsync_volume: u64,
    pub mi_autosync_threshold: u64,
    pub mi_since_sync_seconds16dot16: u32,
    pub mi_autosync_period_seconds16dot16: u32,
    pub mi_since_reader_check_seconds16dot16: u32,
    pub mi_mode: u32,
    pub mi_pgop_stat: MDBX_envinfo__bindgen_ty_3,
    pub mi_dxbid: MDBX_envinfo__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_envinfo__bindgen_ty_1 {
    pub lower: u64,
    pub upper: u64,
    pub current: u64,
    pub shrink: u64,
    pub grow: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_envinfo__bindgen_ty_2 {
    pub current: MDBX_envinfo__bindgen_ty_2__bindgen_ty_1,
    pub meta: [MDBX_envinfo__bindgen_ty_2__bindgen_ty_1; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_envinfo__bindgen_ty_2__bindgen_ty_1 {
    pub x: u64,
    pub y: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_envinfo__bindgen_ty_3 {
    pub newly: u64,
    pub cow: u64,
    pub clone: u64,
    pub split: u64,
    pub merge: u64,
    pub spill: u64,
    pub unspill: u64,
    pub wops: u64,
    pub prefault: u64,
    pub mincore: u64,
    pub msync: u64,
    pub fsync: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_envinfo__bindgen_ty_4 {
    pub x: u64,
    pub y: u64,
}
pub const MDBX_warmup_default: MDBX_warmup_flags = 0;
pub const MDBX_warmup_force: MDBX_warmup_flags = 1;
pub const MDBX_warmup_oomsafe: MDBX_warmup_flags = 2;
pub const MDBX_warmup_lock: MDBX_warmup_flags = 4;
pub const MDBX_warmup_touchlimit: MDBX_warmup_flags = 8;
pub const MDBX_warmup_release: MDBX_warmup_flags = 16;
pub type MDBX_warmup_flags = ::std::os::raw::c_uint;
pub use self::MDBX_warmup_flags as MDBX_warmup_flags_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_txn_info {
    pub txn_id: u64,
    pub txn_reader_lag: u64,
    pub txn_space_used: u64,
    pub txn_space_limit_soft: u64,
    pub txn_space_limit_hard: u64,
    pub txn_space_retired: u64,
    pub txn_space_leftover: u64,
    pub txn_space_dirty: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_commit_latency {
    pub preparation: u32,
    pub gc_wallclock: u32,
    pub audit: u32,
    pub write: u32,
    pub sync: u32,
    pub ending: u32,
    pub whole: u32,
    pub gc_cputime: u32,
    pub gc_prof: MDBX_commit_latency__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_commit_latency__bindgen_ty_1 {
    pub wloops: u32,
    pub coalescences: u32,
    pub wipes: u32,
    pub flushes: u32,
    pub kicks: u32,
    pub work_counter: u32,
    pub work_rtime_monotonic: u32,
    pub work_xtime_cpu: u32,
    pub work_rsteps: u32,
    pub work_xpages: u32,
    pub work_majflt: u32,
    pub self_counter: u32,
    pub self_rtime_monotonic: u32,
    pub self_xtime_cpu: u32,
    pub self_rsteps: u32,
    pub self_xpages: u32,
    pub self_majflt: u32,
    pub pnl_merge_work: MDBX_commit_latency__bindgen_ty_1__bindgen_ty_1,
    pub pnl_merge_self: MDBX_commit_latency__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_commit_latency__bindgen_ty_1__bindgen_ty_1 {
    pub time: u32,
    pub volume: u64,
    pub calls: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_canary {
    pub x: u64,
    pub y: u64,
    pub z: u64,
    pub v: u64,
}
pub type MDBX_cmp_func = ::std::option::Option<
    unsafe extern "C" fn(a: *const MDBX_val, b: *const MDBX_val) -> ::std::os::raw::c_int,
>;
pub type MDBX_table_enum_func = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        txn: *const MDBX_txn,
        name: *const MDBX_val,
        flags: MDBX_db_flags_t,
        stat: *const MDBX_stat,
        dbi: MDBX_dbi,
    ) -> ::std::os::raw::c_int,
>;
pub const MDBX_DBI_DIRTY: MDBX_dbi_state = 1;
pub const MDBX_DBI_STALE: MDBX_dbi_state = 2;
pub const MDBX_DBI_FRESH: MDBX_dbi_state = 4;
pub const MDBX_DBI_CREAT: MDBX_dbi_state = 8;
pub type MDBX_dbi_state = ::std::os::raw::c_uint;
pub use self::MDBX_dbi_state as MDBX_dbi_state_t;
pub type MDBX_preserve_func = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        target: *mut MDBX_val,
        src: *const ::std::os::raw::c_void,
        bytes: usize,
    ) -> ::std::os::raw::c_int,
>;
pub type MDBX_predicate_func = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        key: *mut MDBX_val,
        value: *mut MDBX_val,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type MDBX_reader_list_func = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        num: ::std::os::raw::c_int,
        slot: ::std::os::raw::c_int,
        pid: mdbx_pid_t,
        thread: mdbx_tid_t,
        txnid: u64,
        lag: u64,
        bytes_used: usize,
        bytes_retained: usize,
    ) -> ::std::os::raw::c_int,
>;
pub type MDBX_hsr_func = ::std::option::Option<
    unsafe extern "C" fn(
        env: *const MDBX_env,
        txn: *const MDBX_txn,
        pid: mdbx_pid_t,
        tid: mdbx_tid_t,
        laggard: u64,
        gap: ::std::os::raw::c_uint,
        space: usize,
        retry: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub const MDBX_CHK_DEFAULTS: MDBX_chk_flags = 0;
pub const MDBX_CHK_READWRITE: MDBX_chk_flags = 1;
pub const MDBX_CHK_SKIP_BTREE_TRAVERSAL: MDBX_chk_flags = 2;
pub const MDBX_CHK_SKIP_KV_TRAVERSAL: MDBX_chk_flags = 4;
pub const MDBX_CHK_IGNORE_ORDER: MDBX_chk_flags = 8;
pub type MDBX_chk_flags = ::std::os::raw::c_uint;
pub use self::MDBX_chk_flags as MDBX_chk_flags_t;
pub const MDBX_chk_severity_prio_shift: MDBX_chk_severity = 4;
pub const MDBX_chk_severity_kind_mask: MDBX_chk_severity = 15;
pub const MDBX_chk_fatal: MDBX_chk_severity = 0;
pub const MDBX_chk_error: MDBX_chk_severity = 17;
pub const MDBX_chk_warning: MDBX_chk_severity = 34;
pub const MDBX_chk_notice: MDBX_chk_severity = 51;
pub const MDBX_chk_result: MDBX_chk_severity = 68;
pub const MDBX_chk_resolution: MDBX_chk_severity = 85;
pub const MDBX_chk_processing: MDBX_chk_severity = 86;
pub const MDBX_chk_info: MDBX_chk_severity = 103;
pub const MDBX_chk_verbose: MDBX_chk_severity = 120;
pub const MDBX_chk_details: MDBX_chk_severity = 137;
pub const MDBX_chk_extra: MDBX_chk_severity = 154;
pub type MDBX_chk_severity = ::std::os::raw::c_uint;
pub use self::MDBX_chk_severity as MDBX_chk_severity_t;
pub const MDBX_chk_none: MDBX_chk_stage = 0;
pub const MDBX_chk_init: MDBX_chk_stage = 1;
pub const MDBX_chk_lock: MDBX_chk_stage = 2;
pub const MDBX_chk_meta: MDBX_chk_stage = 3;
pub const MDBX_chk_tree: MDBX_chk_stage = 4;
pub const MDBX_chk_gc: MDBX_chk_stage = 5;
pub const MDBX_chk_space: MDBX_chk_stage = 6;
pub const MDBX_chk_maindb: MDBX_chk_stage = 7;
pub const MDBX_chk_tables: MDBX_chk_stage = 8;
pub const MDBX_chk_conclude: MDBX_chk_stage = 9;
pub const MDBX_chk_unlock: MDBX_chk_stage = 10;
pub const MDBX_chk_finalize: MDBX_chk_stage = 11;
pub type MDBX_chk_stage = ::std::os::raw::c_uint;
pub use self::MDBX_chk_stage as MDBX_chk_stage_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_chk_line {
    pub ctx: *mut MDBX_chk_context,
    pub severity: u8,
    pub scope_depth: u8,
    pub empty: u8,
    pub begin: *mut ::std::os::raw::c_char,
    pub end: *mut ::std::os::raw::c_char,
    pub out: *mut ::std::os::raw::c_char,
}
pub type MDBX_chk_line_t = MDBX_chk_line;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_chk_issue {
    pub next: *mut MDBX_chk_issue,
    pub count: usize,
    pub caption: *const ::std::os::raw::c_char,
}
pub type MDBX_chk_issue_t = MDBX_chk_issue;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MDBX_chk_scope {
    pub issues: *mut MDBX_chk_issue_t,
    pub internal: *mut MDBX_chk_internal,
    pub object: *const ::std::os::raw::c_void,
    pub stage: MDBX_chk_stage_t,
    pub verbosity: MDBX_chk_severity_t,
    pub subtotal_issues: usize,
    pub usr_z: MDBX_chk_scope__bindgen_ty_1,
    pub usr_v: MDBX_chk_scope__bindgen_ty_1,
    pub usr_o: MDBX_chk_scope__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MDBX_chk_scope__bindgen_ty_1 {
    pub ptr: *mut ::std::os::raw::c_void,
    pub number: usize,
}
pub type MDBX_chk_scope_t = MDBX_chk_scope;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_chk_user_table_cookie {
    _unused: [u8; 0],
}
pub type MDBX_chk_user_table_cookie_t = MDBX_chk_user_table_cookie;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_chk_histogram {
    pub amount: usize,
    pub count: usize,
    pub ones: usize,
    pub pad: usize,
    pub ranges: [MDBX_chk_histogram__bindgen_ty_1; 9usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_chk_histogram__bindgen_ty_1 {
    pub begin: usize,
    pub end: usize,
    pub amount: usize,
    pub count: usize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_chk_table {
    pub cookie: *mut MDBX_chk_user_table_cookie_t,
    pub name: MDBX_val,
    pub flags: MDBX_db_flags_t,
    pub id: ::std::os::raw::c_int,
    pub payload_bytes: usize,
    pub lost_bytes: usize,
    pub pages: MDBX_chk_table__bindgen_ty_1,
    pub histogram: MDBX_chk_table__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_chk_table__bindgen_ty_1 {
    pub all: usize,
    pub empty: usize,
    pub other: usize,
    pub branch: usize,
    pub leaf: usize,
    pub nested_branch: usize,
    pub nested_leaf: usize,
    pub nested_subleaf: usize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_chk_table__bindgen_ty_2 {
    pub deep: MDBX_chk_histogram,
    pub large_pages: MDBX_chk_histogram,
    pub nested_tree: MDBX_chk_histogram,
    pub key_len: MDBX_chk_histogram,
    pub val_len: MDBX_chk_histogram,
}
pub type MDBX_chk_table_t = MDBX_chk_table;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_chk_context {
    pub internal: *mut MDBX_chk_internal,
    pub env: *mut MDBX_env,
    pub txn: *mut MDBX_txn,
    pub scope: *mut MDBX_chk_scope_t,
    pub scope_nesting: u8,
    pub result: MDBX_chk_context__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_chk_context__bindgen_ty_1 {
    pub total_payload_bytes: usize,
    pub table_total: usize,
    pub table_processed: usize,
    pub total_unused_bytes: usize,
    pub unused_pages: usize,
    pub processed_pages: usize,
    pub reclaimable_pages: usize,
    pub gc_pages: usize,
    pub alloc_pages: usize,
    pub backed_pages: usize,
    pub problems_meta: usize,
    pub tree_problems: usize,
    pub gc_tree_problems: usize,
    pub kv_tree_problems: usize,
    pub problems_gc: usize,
    pub problems_kv: usize,
    pub total_problems: usize,
    pub steady_txnid: u64,
    pub recent_txnid: u64,
    pub tables: *const *const MDBX_chk_table_t,
}
pub type MDBX_chk_context_t = MDBX_chk_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_chk_callbacks {
    pub check_break:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut MDBX_chk_context_t) -> bool>,
    pub scope_push: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut MDBX_chk_context_t,
            outer: *mut MDBX_chk_scope_t,
            inner: *mut MDBX_chk_scope_t,
            fmt: *const ::std::os::raw::c_char,
            args: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
    >,
    pub scope_conclude: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut MDBX_chk_context_t,
            outer: *mut MDBX_chk_scope_t,
            inner: *mut MDBX_chk_scope_t,
            err: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub scope_pop: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut MDBX_chk_context_t,
            outer: *mut MDBX_chk_scope_t,
            inner: *mut MDBX_chk_scope_t,
        ),
    >,
    pub issue: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut MDBX_chk_context_t,
            object: *const ::std::os::raw::c_char,
            entry_number: u64,
            issue: *const ::std::os::raw::c_char,
            extra_fmt: *const ::std::os::raw::c_char,
            extra_args: *mut __va_list_tag,
        ),
    >,
    pub table_filter: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut MDBX_chk_context_t,
            name: *const MDBX_val,
            flags: MDBX_db_flags_t,
        ) -> *mut MDBX_chk_user_table_cookie_t,
    >,
    pub table_conclude: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut MDBX_chk_context_t,
            table: *const MDBX_chk_table_t,
            cursor: *mut MDBX_cursor,
            err: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub table_dispose: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut MDBX_chk_context_t, table: *const MDBX_chk_table_t),
    >,
    pub table_handle_kv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut MDBX_chk_context_t,
            table: *const MDBX_chk_table_t,
            entry_number: usize,
            key: *const MDBX_val,
            value: *const MDBX_val,
        ) -> ::std::os::raw::c_int,
    >,
    pub stage_begin: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut MDBX_chk_context_t,
            arg1: MDBX_chk_stage_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub stage_end: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut MDBX_chk_context_t,
            arg1: MDBX_chk_stage_t,
            err: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub print_begin: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut MDBX_chk_context_t,
            severity: MDBX_chk_severity_t,
        ) -> *mut MDBX_chk_line_t,
    >,
    pub print_flush: ::std::option::Option<unsafe extern "C" fn(arg1: *mut MDBX_chk_line_t)>,
    pub print_done: ::std::option::Option<unsafe extern "C" fn(arg1: *mut MDBX_chk_line_t)>,
    pub print_chars: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut MDBX_chk_line_t,
            str_: *const ::std::os::raw::c_char,
            len: usize,
        ),
    >,
    pub print_format: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut MDBX_chk_line_t,
            fmt: *const ::std::os::raw::c_char,
            args: *mut __va_list_tag,
        ),
    >,
    pub print_size: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut MDBX_chk_line_t,
            prefix: *const ::std::os::raw::c_char,
            value: u64,
            suffix: *const ::std::os::raw::c_char,
        ),
    >,
}
pub type MDBX_chk_callbacks_t = MDBX_chk_callbacks;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDBX_chk_internal {
    pub _address: u8,
}
unsafe extern "C" {
    pub static mdbx_version: MDBX_version_info;
    pub static mdbx_build: MDBX_build_info;
    pub fn mdbx_setup_debug(
        log_level: MDBX_log_level_t,
        debug_flags: MDBX_debug_flags_t,
        logger: MDBX_debug_func,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_setup_debug_nofmt(
        log_level: MDBX_log_level_t,
        debug_flags: MDBX_debug_flags_t,
        logger: MDBX_debug_func_nofmt,
        logger_buffer: *mut ::std::os::raw::c_char,
        logger_buffer_size: usize,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_set_assert(env: *mut MDBX_env, func: MDBX_assert_func)
        -> ::std::os::raw::c_int;
    pub fn mdbx_dump_val(
        key: *const MDBX_val,
        buf: *mut ::std::os::raw::c_char,
        bufsize: usize,
    ) -> *const ::std::os::raw::c_char;
    pub fn mdbx_panic(fmt: *const ::std::os::raw::c_char, ...) -> !;
    pub fn mdbx_assert_fail(
        env: *const MDBX_env,
        msg: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_uint,
    ) -> !;
    pub fn mdbx_strerror(errnum: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
    pub fn mdbx_strerror_r(
        errnum: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> *const ::std::os::raw::c_char;
    pub fn mdbx_liberr2str(errnum: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
    pub fn mdbx_env_create(penv: *mut *mut MDBX_env) -> ::std::os::raw::c_int;
    pub fn mdbx_env_set_option(
        env: *mut MDBX_env,
        option: MDBX_option_t,
        value: u64,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_get_option(
        env: *const MDBX_env,
        option: MDBX_option_t,
        pvalue: *mut u64,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_open(
        env: *mut MDBX_env,
        pathname: *const ::std::os::raw::c_char,
        flags: MDBX_env_flags_t,
        mode: mdbx_mode_t,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_delete(
        pathname: *const ::std::os::raw::c_char,
        mode: MDBX_env_delete_mode_t,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_copy(
        env: *mut MDBX_env,
        dest: *const ::std::os::raw::c_char,
        flags: MDBX_copy_flags_t,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_txn_copy2pathname(
        txn: *mut MDBX_txn,
        dest: *const ::std::os::raw::c_char,
        flags: MDBX_copy_flags_t,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_copy2fd(
        env: *mut MDBX_env,
        fd: mdbx_filehandle_t,
        flags: MDBX_copy_flags_t,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_txn_copy2fd(
        txn: *mut MDBX_txn,
        fd: mdbx_filehandle_t,
        flags: MDBX_copy_flags_t,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_stat_ex(
        env: *const MDBX_env,
        txn: *const MDBX_txn,
        stat: *mut MDBX_stat,
        bytes: usize,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_info_ex(
        env: *const MDBX_env,
        txn: *const MDBX_txn,
        info: *mut MDBX_envinfo,
        bytes: usize,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_sync_ex(
        env: *mut MDBX_env,
        force: bool,
        nonblock: bool,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_close_ex(env: *mut MDBX_env, dont_sync: bool) -> ::std::os::raw::c_int;
    pub fn mdbx_env_resurrect_after_fork(env: *mut MDBX_env) -> ::std::os::raw::c_int;
    pub fn mdbx_env_warmup(
        env: *const MDBX_env,
        txn: *const MDBX_txn,
        flags: MDBX_warmup_flags_t,
        timeout_seconds_16dot16: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_set_flags(
        env: *mut MDBX_env,
        flags: MDBX_env_flags_t,
        onoff: bool,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_get_flags(
        env: *const MDBX_env,
        flags: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_get_path(
        env: *const MDBX_env,
        dest: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_get_fd(
        env: *const MDBX_env,
        fd: *mut mdbx_filehandle_t,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_set_geometry(
        env: *mut MDBX_env,
        size_lower: isize,
        size_now: isize,
        size_upper: isize,
        growth_step: isize,
        shrink_threshold: isize,
        pagesize: isize,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_is_readahead_reasonable(volume: usize, redundancy: isize) -> ::std::os::raw::c_int;
    pub fn mdbx_limits_dbsize_min(pagesize: isize) -> isize;
    pub fn mdbx_limits_dbsize_max(pagesize: isize) -> isize;
    pub fn mdbx_limits_keysize_max(pagesize: isize, flags: MDBX_db_flags_t) -> isize;
    pub fn mdbx_limits_keysize_min(flags: MDBX_db_flags_t) -> isize;
    pub fn mdbx_limits_valsize_max(pagesize: isize, flags: MDBX_db_flags_t) -> isize;
    pub fn mdbx_limits_valsize_min(flags: MDBX_db_flags_t) -> isize;
    pub fn mdbx_limits_pairsize4page_max(pagesize: isize, flags: MDBX_db_flags_t) -> isize;
    pub fn mdbx_limits_valsize4page_max(pagesize: isize, flags: MDBX_db_flags_t) -> isize;
    pub fn mdbx_limits_txnsize_max(pagesize: isize) -> isize;
    pub fn mdbx_default_pagesize() -> usize;
    pub fn mdbx_get_sysraminfo(
        page_size: *mut isize,
        total_pages: *mut isize,
        avail_pages: *mut isize,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_get_maxkeysize_ex(
        env: *const MDBX_env,
        flags: MDBX_db_flags_t,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_get_maxvalsize_ex(
        env: *const MDBX_env,
        flags: MDBX_db_flags_t,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_get_maxkeysize(env: *const MDBX_env) -> ::std::os::raw::c_int;
    pub fn mdbx_env_get_pairsize4page_max(
        env: *const MDBX_env,
        flags: MDBX_db_flags_t,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_get_valsize4page_max(
        env: *const MDBX_env,
        flags: MDBX_db_flags_t,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_set_userctx(
        env: *mut MDBX_env,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_get_userctx(env: *const MDBX_env) -> *mut ::std::os::raw::c_void;
    pub fn mdbx_txn_begin_ex(
        env: *mut MDBX_env,
        parent: *mut MDBX_txn,
        flags: MDBX_txn_flags_t,
        txn: *mut *mut MDBX_txn,
        context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_txn_set_userctx(
        txn: *mut MDBX_txn,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_txn_get_userctx(txn: *const MDBX_txn) -> *mut ::std::os::raw::c_void;
    pub fn mdbx_txn_info(
        txn: *const MDBX_txn,
        info: *mut MDBX_txn_info,
        scan_rlt: bool,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_txn_env(txn: *const MDBX_txn) -> *mut MDBX_env;
    pub fn mdbx_txn_flags(txn: *const MDBX_txn) -> MDBX_txn_flags_t;
    pub fn mdbx_txn_id(txn: *const MDBX_txn) -> u64;
    pub fn mdbx_txn_commit_ex(
        txn: *mut MDBX_txn,
        latency: *mut MDBX_commit_latency,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_txn_abort(txn: *mut MDBX_txn) -> ::std::os::raw::c_int;
    pub fn mdbx_txn_break(txn: *mut MDBX_txn) -> ::std::os::raw::c_int;
    pub fn mdbx_txn_reset(txn: *mut MDBX_txn) -> ::std::os::raw::c_int;
    pub fn mdbx_txn_park(txn: *mut MDBX_txn, autounpark: bool) -> ::std::os::raw::c_int;
    pub fn mdbx_txn_unpark(txn: *mut MDBX_txn, restart_if_ousted: bool) -> ::std::os::raw::c_int;
    pub fn mdbx_txn_renew(txn: *mut MDBX_txn) -> ::std::os::raw::c_int;
    pub fn mdbx_canary_put(txn: *mut MDBX_txn, canary: *const MDBX_canary)
        -> ::std::os::raw::c_int;
    pub fn mdbx_canary_get(txn: *const MDBX_txn, canary: *mut MDBX_canary)
        -> ::std::os::raw::c_int;
    pub fn mdbx_dbi_open(
        txn: *mut MDBX_txn,
        name: *const ::std::os::raw::c_char,
        flags: MDBX_db_flags_t,
        dbi: *mut MDBX_dbi,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_dbi_open2(
        txn: *mut MDBX_txn,
        name: *const MDBX_val,
        flags: MDBX_db_flags_t,
        dbi: *mut MDBX_dbi,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_dbi_open_ex(
        txn: *mut MDBX_txn,
        name: *const ::std::os::raw::c_char,
        flags: MDBX_db_flags_t,
        dbi: *mut MDBX_dbi,
        keycmp: MDBX_cmp_func,
        datacmp: MDBX_cmp_func,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_dbi_open_ex2(
        txn: *mut MDBX_txn,
        name: *const MDBX_val,
        flags: MDBX_db_flags_t,
        dbi: *mut MDBX_dbi,
        keycmp: MDBX_cmp_func,
        datacmp: MDBX_cmp_func,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_dbi_rename(
        txn: *mut MDBX_txn,
        dbi: MDBX_dbi,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_dbi_rename2(
        txn: *mut MDBX_txn,
        dbi: MDBX_dbi,
        name: *const MDBX_val,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_enumerate_tables(
        txn: *const MDBX_txn,
        func: MDBX_table_enum_func,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_key_from_jsonInteger(json_integer: i64) -> u64;
    pub fn mdbx_key_from_double(ieee754_64bit: f64) -> u64;
    pub fn mdbx_key_from_ptrdouble(ieee754_64bit: *const f64) -> u64;
    pub fn mdbx_key_from_float(ieee754_32bit: f32) -> u32;
    pub fn mdbx_key_from_ptrfloat(ieee754_32bit: *const f32) -> u32;
    pub fn mdbx_jsonInteger_from_key(arg1: MDBX_val) -> i64;
    pub fn mdbx_double_from_key(arg1: MDBX_val) -> f64;
    pub fn mdbx_float_from_key(arg1: MDBX_val) -> f32;
    pub fn mdbx_int32_from_key(arg1: MDBX_val) -> i32;
    pub fn mdbx_int64_from_key(arg1: MDBX_val) -> i64;
    pub fn mdbx_dbi_stat(
        txn: *const MDBX_txn,
        dbi: MDBX_dbi,
        stat: *mut MDBX_stat,
        bytes: usize,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_dbi_dupsort_depthmask(
        txn: *const MDBX_txn,
        dbi: MDBX_dbi,
        mask: *mut u32,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_dbi_flags_ex(
        txn: *const MDBX_txn,
        dbi: MDBX_dbi,
        flags: *mut ::std::os::raw::c_uint,
        state: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_dbi_close(env: *mut MDBX_env, dbi: MDBX_dbi) -> ::std::os::raw::c_int;
    pub fn mdbx_drop(txn: *mut MDBX_txn, dbi: MDBX_dbi, del: bool) -> ::std::os::raw::c_int;
    pub fn mdbx_get(
        txn: *const MDBX_txn,
        dbi: MDBX_dbi,
        key: *const MDBX_val,
        data: *mut MDBX_val,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_get_ex(
        txn: *const MDBX_txn,
        dbi: MDBX_dbi,
        key: *mut MDBX_val,
        data: *mut MDBX_val,
        values_count: *mut usize,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_get_equal_or_great(
        txn: *const MDBX_txn,
        dbi: MDBX_dbi,
        key: *mut MDBX_val,
        data: *mut MDBX_val,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_put(
        txn: *mut MDBX_txn,
        dbi: MDBX_dbi,
        key: *const MDBX_val,
        data: *mut MDBX_val,
        flags: MDBX_put_flags_t,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_replace(
        txn: *mut MDBX_txn,
        dbi: MDBX_dbi,
        key: *const MDBX_val,
        new_data: *mut MDBX_val,
        old_data: *mut MDBX_val,
        flags: MDBX_put_flags_t,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_replace_ex(
        txn: *mut MDBX_txn,
        dbi: MDBX_dbi,
        key: *const MDBX_val,
        new_data: *mut MDBX_val,
        old_data: *mut MDBX_val,
        flags: MDBX_put_flags_t,
        preserver: MDBX_preserve_func,
        preserver_context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_del(
        txn: *mut MDBX_txn,
        dbi: MDBX_dbi,
        key: *const MDBX_val,
        data: *const MDBX_val,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_create(context: *mut ::std::os::raw::c_void) -> *mut MDBX_cursor;
    pub fn mdbx_cursor_set_userctx(
        cursor: *mut MDBX_cursor,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_get_userctx(cursor: *const MDBX_cursor) -> *mut ::std::os::raw::c_void;
    pub fn mdbx_cursor_bind(
        txn: *mut MDBX_txn,
        cursor: *mut MDBX_cursor,
        dbi: MDBX_dbi,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_unbind(cursor: *mut MDBX_cursor) -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_reset(cursor: *mut MDBX_cursor) -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_open(
        txn: *mut MDBX_txn,
        dbi: MDBX_dbi,
        cursor: *mut *mut MDBX_cursor,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_close(cursor: *mut MDBX_cursor);
    pub fn mdbx_cursor_close2(cursor: *mut MDBX_cursor) -> ::std::os::raw::c_int;
    pub fn mdbx_txn_release_all_cursors_ex(
        txn: *const MDBX_txn,
        unbind: bool,
        count: *mut usize,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_renew(txn: *mut MDBX_txn, cursor: *mut MDBX_cursor)
        -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_txn(cursor: *const MDBX_cursor) -> *mut MDBX_txn;
    pub fn mdbx_cursor_dbi(cursor: *const MDBX_cursor) -> MDBX_dbi;
    pub fn mdbx_cursor_copy(
        src: *const MDBX_cursor,
        dest: *mut MDBX_cursor,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_compare(
        left: *const MDBX_cursor,
        right: *const MDBX_cursor,
        ignore_multival: bool,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_get(
        cursor: *mut MDBX_cursor,
        key: *mut MDBX_val,
        data: *mut MDBX_val,
        op: MDBX_cursor_op,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_ignord(cursor: *mut MDBX_cursor) -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_scan(
        cursor: *mut MDBX_cursor,
        predicate: MDBX_predicate_func,
        context: *mut ::std::os::raw::c_void,
        start_op: MDBX_cursor_op,
        turn_op: MDBX_cursor_op,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_scan_from(
        cursor: *mut MDBX_cursor,
        predicate: MDBX_predicate_func,
        context: *mut ::std::os::raw::c_void,
        from_op: MDBX_cursor_op,
        from_key: *mut MDBX_val,
        from_value: *mut MDBX_val,
        turn_op: MDBX_cursor_op,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_get_batch(
        cursor: *mut MDBX_cursor,
        count: *mut usize,
        pairs: *mut MDBX_val,
        limit: usize,
        op: MDBX_cursor_op,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_put(
        cursor: *mut MDBX_cursor,
        key: *const MDBX_val,
        data: *mut MDBX_val,
        flags: MDBX_put_flags_t,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_del(
        cursor: *mut MDBX_cursor,
        flags: MDBX_put_flags_t,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_count(
        cursor: *const MDBX_cursor,
        count: *mut usize,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_count_ex(
        cursor: *const MDBX_cursor,
        count: *mut usize,
        stat: *mut MDBX_stat,
        bytes: usize,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_eof(cursor: *const MDBX_cursor) -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_on_first(cursor: *const MDBX_cursor) -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_on_first_dup(cursor: *const MDBX_cursor) -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_on_last(cursor: *const MDBX_cursor) -> ::std::os::raw::c_int;
    pub fn mdbx_cursor_on_last_dup(cursor: *const MDBX_cursor) -> ::std::os::raw::c_int;
    pub fn mdbx_estimate_distance(
        first: *const MDBX_cursor,
        last: *const MDBX_cursor,
        distance_items: *mut isize,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_estimate_move(
        cursor: *const MDBX_cursor,
        key: *mut MDBX_val,
        data: *mut MDBX_val,
        move_op: MDBX_cursor_op,
        distance_items: *mut isize,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_estimate_range(
        txn: *const MDBX_txn,
        dbi: MDBX_dbi,
        begin_key: *const MDBX_val,
        begin_data: *const MDBX_val,
        end_key: *const MDBX_val,
        end_data: *const MDBX_val,
        distance_items: *mut isize,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_is_dirty(
        txn: *const MDBX_txn,
        ptr: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_dbi_sequence(
        txn: *mut MDBX_txn,
        dbi: MDBX_dbi,
        result: *mut u64,
        increment: u64,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_cmp(
        txn: *const MDBX_txn,
        dbi: MDBX_dbi,
        a: *const MDBX_val,
        b: *const MDBX_val,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_get_keycmp(flags: MDBX_db_flags_t) -> MDBX_cmp_func;
    pub fn mdbx_dcmp(
        txn: *const MDBX_txn,
        dbi: MDBX_dbi,
        a: *const MDBX_val,
        b: *const MDBX_val,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_get_datacmp(flags: MDBX_db_flags_t) -> MDBX_cmp_func;
    pub fn mdbx_reader_list(
        env: *const MDBX_env,
        func: MDBX_reader_list_func,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_reader_check(
        env: *mut MDBX_env,
        dead: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_txn_straggler(
        txn: *const MDBX_txn,
        percent: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_thread_register(env: *const MDBX_env) -> ::std::os::raw::c_int;
    pub fn mdbx_thread_unregister(env: *const MDBX_env) -> ::std::os::raw::c_int;
    pub fn mdbx_env_set_hsr(
        env: *mut MDBX_env,
        hsr_callback: MDBX_hsr_func,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_get_hsr(env: *const MDBX_env) -> MDBX_hsr_func;
    pub fn mdbx_txn_lock(env: *mut MDBX_env, dont_wait: bool) -> ::std::os::raw::c_int;
    pub fn mdbx_txn_unlock(env: *mut MDBX_env) -> ::std::os::raw::c_int;
    pub fn mdbx_env_open_for_recovery(
        env: *mut MDBX_env,
        pathname: *const ::std::os::raw::c_char,
        target_meta: ::std::os::raw::c_uint,
        writeable: bool,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_turn_for_recovery(
        env: *mut MDBX_env,
        target_meta: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_preopen_snapinfo(
        pathname: *const ::std::os::raw::c_char,
        info: *mut MDBX_envinfo,
        bytes: usize,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_chk(
        env: *mut MDBX_env,
        cb: *const MDBX_chk_callbacks_t,
        ctx: *mut MDBX_chk_context_t,
        flags: MDBX_chk_flags_t,
        verbosity: MDBX_chk_severity_t,
        timeout_seconds_16dot16: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
    pub fn mdbx_env_chk_encount_problem(ctx: *mut MDBX_chk_context_t) -> ::std::os::raw::c_int;
}
